# ============================================================================
# Enhanced Content Loaders Deployment Script
# RainmeterManager - RenderProcess/Content Enhancement
# Version: 2.0.0
# ============================================================================

param(
    [string]$TargetPath = ".\RenderProcess\Content",
    [switch]$Backup = $true,
    [switch]$Force = $false,
    [switch]$DryRun = $false
)

$ErrorActionPreference = "Stop"

Write-Host "=" * 80 -ForegroundColor Cyan
Write-Host "Enhanced Content Loaders Deployment" -ForegroundColor Cyan
Write-Host "Version 2.0.0 - Production Ready" -ForegroundColor Cyan
Write-Host "=" * 80 -ForegroundColor Cyan
Write-Host ""

# Check if target exists
if (-not (Test-Path $TargetPath)) {
    Write-Host "‚ùå Target path not found: $TargetPath" -ForegroundColor Red
    Write-Host "Creating directory..." -ForegroundColor Yellow
    if (-not $DryRun) {
        New-Item -ItemType Directory -Path $TargetPath -Force | Out-Null
        Write-Host "‚úÖ Created: $TargetPath" -ForegroundColor Green
    }
}

# Backup existing files
if ($Backup -and -not $DryRun) {
    $backupPath = ".\backup_content_loaders_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    Write-Host "üì¶ Creating backup at: $backupPath" -ForegroundColor Yellow
    
    $filesToBackup = @(
        "FileContentLoader.cs",
        "WebContentLoader.cs",
        "MediaContentLoader.cs",
        "APIContentLoader.cs"
    )
    
    $backedUpCount = 0
    foreach ($file in $filesToBackup) {
        $sourcePath = Join-Path $TargetPath $file
        if (Test-Path $sourcePath) {
            if (-not (Test-Path $backupPath)) {
                New-Item -ItemType Directory -Path $backupPath | Out-Null
            }
            Copy-Item $sourcePath (Join-Path $backupPath $file)
            Write-Host "  ‚úÖ Backed up: $file" -ForegroundColor Green
            $backedUpCount++
        }
    }
    
    if ($backedUpCount -eq 0) {
        Write-Host "  ‚ÑπÔ∏è  No existing files to backup" -ForegroundColor Cyan
    }
    Write-Host ""
}

# Files to deploy with their content
$filesToDeploy = @{
    "FileContentLoader.cs" = @{
        Description = "Enhanced file loader - 50+ formats, thumbnails, syntax highlighting"
        Source = "FileContentLoader.cs"
        Action = "Replace"
        Critical = $true
    }
    
    "WebContentLoader.cs" = @{
        Description = "Web content loader - 50+ curated sources, caching, rate limiting"
        Source = "WebContentLoader.cs"
        Action = "Replace"
        Critical = $true
    }
    
    "MediaContentLoader.cs" = @{
        Description = "Media loader - Video/audio with metadata extraction"
        Source = "MediaContentLoader.cs"
        Action = "Replace"
        Critical = $true
    }
    
    "APIContentLoader.cs" = @{
        Description = "API & Dynamic Environment loader - REST, auth, environments"
        Source = "APIContentLoader.cs"
        Action = "Replace"
        Critical = $true
    }
}

Write-Host "üìã Deployment Plan:" -ForegroundColor Cyan
Write-Host "  Target: $TargetPath" -ForegroundColor White
Write-Host "  Files: $($filesToDeploy.Count)" -ForegroundColor White
Write-Host "  Dry Run: $DryRun" -ForegroundColor White
Write-Host ""

# Verify source files exist
Write-Host "üîç Verifying source files..." -ForegroundColor Cyan
$allSourcesExist = $true
foreach ($file in $filesToDeploy.Keys) {
    $sourceFile = $filesToDeploy[$file].Source
    if (-not (Test-Path $sourceFile)) {
        Write-Host "  ‚ùå Missing: $sourceFile" -ForegroundColor Red
        $allSourcesExist = $false
    } else {
        $size = (Get-Item $sourceFile).Length
        Write-Host "  ‚úÖ Found: $sourceFile ($([math]::Round($size/1KB, 2)) KB)" -ForegroundColor Green
    }
}

if (-not $allSourcesExist) {
    Write-Host ""
    Write-Host "‚ùå Deployment aborted - missing source files" -ForegroundColor Red
    Write-Host "Please ensure all loader files are in the current directory" -ForegroundColor Yellow
    exit 1
}

Write-Host ""

# Deploy files
Write-Host "üöÄ Deploying files..." -ForegroundColor Cyan
$deployedCount = 0
$failedCount = 0

foreach ($file in $filesToDeploy.Keys) {
    $info = $filesToDeploy[$file]
    $targetFile = Join-Path $TargetPath $file
    
    Write-Host "  üìÑ $file" -ForegroundColor White
    Write-Host "     $($info.Description)" -ForegroundColor Gray
    
    try {
        if ($DryRun) {
            Write-Host "     [DRY RUN] Would copy: $($info.Source) ‚Üí $targetFile" -ForegroundColor Yellow
        } else {
            # Check if file exists
            if (Test-Path $targetFile) {
                if (-not $Force) {
                    $response = Read-Host "     File exists. Overwrite? (y/N)"
                    if ($response -ne 'y' -and $response -ne 'Y') {
                        Write-Host "     ‚è≠Ô∏è  Skipped" -ForegroundColor Yellow
                        continue
                    }
                }
            }
            
            # Copy file
            Copy-Item $info.Source $targetFile -Force
            
            # Verify
            if (Test-Path $targetFile) {
                $size = (Get-Item $targetFile).Length
                Write-Host "     ‚úÖ Deployed ($([math]::Round($size/1KB, 2)) KB)" -ForegroundColor Green
                $deployedCount++
            } else {
                throw "File not found after copy"
            }
        }
    }
    catch {
        Write-Host "     ‚ùå Failed: $($_.Exception.Message)" -ForegroundColor Red
        $failedCount++
        
        if ($info.Critical) {
            Write-Host ""
            Write-Host "‚ùå Critical file deployment failed - aborting" -ForegroundColor Red
            exit 1
        }
    }
}

Write-Host ""
Write-Host "=" * 80 -ForegroundColor Cyan

# Summary
if ($DryRun) {
    Write-Host "üîç DRY RUN COMPLETE" -ForegroundColor Yellow
    Write-Host "  Would deploy: $deployedCount files" -ForegroundColor White
    Write-Host "  Run without -DryRun to perform actual deployment" -ForegroundColor Cyan
} else {
    Write-Host "‚úÖ DEPLOYMENT COMPLETE" -ForegroundColor Green
    Write-Host "  Deployed: $deployedCount files" -ForegroundColor White
    Write-Host "  Failed: $failedCount files" -ForegroundColor $(if ($failedCount -gt 0) { "Red" } else { "Green" })
    
    if ($Backup -and (Test-Path $backupPath)) {
        Write-Host "  Backup: $backupPath" -ForegroundColor Cyan
    }
}

Write-Host ""

# Next steps
if (-not $DryRun -and $deployedCount -gt 0) {
    Write-Host "üìù Next Steps:" -ForegroundColor Cyan
    Write-Host "  1. Rebuild RenderProcess project" -ForegroundColor White
    Write-Host "  2. Update dependency injection in Program.cs:" -ForegroundColor White
    Write-Host "     services.AddSingleton<FileContentLoader>();" -ForegroundColor Gray
    Write-Host "     services.AddSingleton<WebContentLoader>();" -ForegroundColor Gray
    Write-Host "     services.AddSingleton<MediaContentLoader>();" -ForegroundColor Gray
    Write-Host "     services.AddSingleton<APIContentLoader>();" -ForegroundColor Gray
    Write-Host "     services.AddSingleton<DynamicEnvironmentLoader>();" -ForegroundColor Gray
    Write-Host "  3. Configure API keys (see documentation)" -ForegroundColor White
    Write-Host "  4. Test with sample content" -ForegroundColor White
    Write-Host ""
    Write-Host "üìñ Full documentation: Enhanced Content Loaders - Complete Documentation.pdf" -ForegroundColor Cyan
}

Write-Host "=" * 80 -ForegroundColor Cyan
Write-Host ""

# Return exit code
exit $(if ($failedCount -gt 0) { 1 } else { 0 })
